akka {
  consul {
    host = "127.0.0.1"
    port = 8500
  }

  curator {
    # Zookeeper namespace used by curator.
    # Using ActorSystem name by default
    namespace = null

    # Connection provided by fixed string
    use-ensemble-provider = "fixed"

    # Supported retry policies
    # "exponential-backoff" - A Retry policy that retries a set number of times with increasing sleep time between retries
    # "bounded-exponential-backoff" - A Retry policy that retries a set number of times with an increasing (up to a maximum bound) sleep time between retries
    # "only-once" - A retry policy that retries only once
    # "bounded-times" - A retry policy that retries a max number of times
    # "until-elapsed" -  A retry policy that retries until a given amount of time elapses
    use-retry-policy = "exponential-backoff"

    # Reaper threshold that determines that a path can be deleted
    reaper-threshold = 5s

    ensemble-provider {
      fixed {
        zk = "127.0.0.1:2181"
      }
      exhibitor {
        hosts = ["127.0.0.1"]
        port = 8181
        polling-interval = 5s
      }
    }

    # Shutdown participation in LeaderLatch if no subscribers interested within.
    # For avoid situation when we has Leadership but not doing any work.
    leader-latch-idle-timeout = 5s

    retry-policy {
      # Retry policy that retries a set number of times with increasing sleep time between retries
      exponential-backoff {
        # Initial amount of time in ms to wait between retries
        base-sleep = 200
        # Max number of times to retry. Limited by 29.
        max-retries = 5
        # Max time in ms to sleep on each retry
        max-sleep = -1 # Use default Integer.MAX_VALUE
      }
      # Retry policy that retries a set number of times with an increasing (up to a maximum bound) sleep time between retries
      bounded-exponential-backoff {
        # Initial amount of time in ms to wait between retries
        base-sleep = 200
        # Maximum amount of time in ms to wait between retries
        max-sleep = 1000
        # Maximum number of times to retry
        max-retries = 5
      }
      only-once {
        # Amount of time in ms for one-shoot retry
        sleep-between = 500
      }
      capped-max {
        # Maximum number of times to retry
        max-retries = 5
        # Amount of time in ms between retries
        sleep-between = 500
      }
      until-elapsed {
        # Maximum amount of time in ms for retry attempts
        max-elapsed = 5000
        # Amount of time in ms between retries
        sleep-between = 500
      }
    }
  }

  etcd {
    peers = ["http://127.0.0.1:2379", "http://127.0.0.1:4001"]
    # By default etcd4j will retry with an exponential back-off algorithm starting with a 20ms interval and will back off to a 10000 ms interval.
    # It will also retry indefinitely.
    # Supported retry policies
    # "exponential-backoff" - Retries with an exponential backoff
    use-retry-policy = "exponential-backoff"

    retry-policy {
      exponential-backoff {
        # milliseconds before retrying base time
        start-delay = 20
        max-retry-count = -1
        max-delay = -1
      }
      only-once {
        # Milliseconds before retrying
        delay-before-retry = 100
      }
      capped-max {
        # Milliseconds before retrying
        delay-before-retry = 100
        # Number of times to retry
        max-retries = 5
      }
      until-elapsed {
        # Milliseconds before retrying
        delay-before-retry = 500
        # Maximum amount of time in ms for retry attempts
        max-elapsed = 5000
      }
    }
  }
}
