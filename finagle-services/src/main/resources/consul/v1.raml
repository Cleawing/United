#%RAML 0.8
---
title: Hashicorp Consul API
version: v1
baseUri: http://127.0.0.1:8500/v1
/kv:
  /{key}:
    uriParameters:
      key:
        type: string
        required: true
    get:
      description: |
        Retrieve value by provided key
      queryParameters:
        dc:
          description: |
            By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            It is important to note that each datacenter has its own KV store, and there is no built-in replication between datacenters.
          type: string
        keys:
          description: |
            It is possible to list just keys without their values by using the this query parameter.
            This will return a list of the keys under the given prefix.
          enum: [true]
        raw:
          description: |
            If this query parameter is used with a non-recursive GET, the response is just the raw value of the key, without any encoding.
          enum: [true]
        recurse:
          description: |
            If this query parameter is provided, it will return all keys with the given prefix.
          enum: [true]
        separator:
          description: |
            can be used to list only up to a given separator
          type: string
      responses:
        200:
          description: |
            Succesfully retrieved value by provided key
          body:
            application/json: !!null
            "text/plain; charset=utf-8": !!null
        404:
          description: |
            Key not found
        500:
          description: |
            No path to datacenter.
          body:
            text/plain: !!null
    put:
      description: |
        Consul expects the request body to be the value corresponding to the key.
      queryParameters:
        dc:
          description: |
            By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            It is important to note that each datacenter has its own KV store, and there is no built-in replication between datacenters.
          type: string
        flags:
          description: |
            This can be used to specify an unsigned value between 0 and 264-1.
            Clients can choose to use this however makes sense for their application.
          type: integer
        cas:
          description: |
            This flag is used to turn the PUT into a Check-And-Set operation.
            This is very useful as a building block for more complex synchronization primitives.
            If the index is 0, Consul will only put the key if it does not already exist.
            If the index is non-zero, the key is only set if the index matches the ModifyIndex of that key.
          type: integer
        acquire:
          description: |
            This flag is used to turn the PUT into a lock acquisition operation.
            This is useful as it allows leader election to be built on top of Consul.
            If the lock is not held and the session is valid, this increments the LockIndex
            and sets the Session value of the key in addition to updating the key contents.
            A key does not need to exist to be acquired.
          type: string
        release:
          description: |
            This flag is used to turn the PUT into a lock release operation.
            This is useful when paired with "?acquire=" as it allows clients to yield a lock.
            This will leave the LockIndex unmodified but will clear the associated Session of the key.
            The key must be held by this session to be unlocked.
          type: string
      body:
        application/x-www-form-urlencoded: !!null
      responses:
        200:
          description: |
            The return value is either true or false. If false is returned, the update has not taken place.
          body:
            application/json: !!null
    delete:
      description: |
        Used to delete a single key or all keys sharing a prefix
      queryParameters:
        dc:
          description: |
            By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            It is important to note that each datacenter has its own KV store, and there is no built-in replication between datacenters.
          type: string
        recurse:
          description: |
            If this query parameter is provided, it will return all keys with the given prefix.
          enum: [true]
        cas:
          description: |
            This flag is used to turn the DELETE into a Check-And-Set operation.
            This is very useful as a building block for more complex synchronization primitives.
            Unlike PUT, the index must be greater than 0 for Consul to take any action: a 0 index will not delete the key.
            If the index is non-zero, the key is only deleted if the index matches the ModifyIndex of that key.
          type: integer
      responses:
        200:
          description: |
            Succesfully deleted value(s) by provided key
          body:
            application/json: !!null
        404:
          description: |
            Key not found
        500:
          description: |
            No path to datacenter.
          body:
            text/plain: !!null
/agent:
  /checks:
    get:
      description: |
        Return all the checks that are registered with the local agent.
        These checks were either provided through configuration files or added dynamically using the HTTP API.
        It is important to note that the checks known by the agent may be different from those reported by the Catalog.
        This is usually due to changes being made while there is no leader elected.
        The agent performs active anti-entropy, so in most situations everything will be in sync within a few seconds.
      responses:
        200:
          description: |
            Succesfully retrieved checks
          body:
            application/json: !!null
  /services:
    get:
      description: |
        Return all the services that are registered with the local agent.
        These services were either provided through configuration files or added dynamically using the HTTP API.
        It is important to note that the services known by the agent may be different from those reported by the Catalog.
        This is usually due to changes being made while there is no leader elected.
        The agent performs active anti-entropy, so in most situations everything will be in sync within a few seconds.
      responses:
        200:
          description: |
            Succesfully retrieved services
          body:
            application/json: !!null
  /members:
    get:
      description: |
        Return the members the agent sees in the cluster gossip pool.
        Due to the nature of gossip, this is eventually consistent: the results may differ by agent.
        The strongly consistent view of nodes is instead provided by "/catalog/nodes".
      queryParameters:
        wan:
          description: |
            For agents running in server mode, providing a "?wan=1" query parameter returns the list of WAN members instead of the LAN members returned by default.
          enum: [1]
      responses:
        200:
          description: |
            Succesfully retrieved services
          body:
            application/json: !!null
  /self:
    get:
      description: |
        Return the configuration and member information of the local agent.
      responses:
        200:
          description: |
            Succesfully retrieved configuration and member information of the local agent.
          body:
            application/json: !!null
  /maintenance:
    put:
      description: |
        Can place the agent into "maintenance mode".
        During maintenance mode, the node will be marked as unavailable and will not be present in DNS or API queries.
        This API call is idempotent. Maintenance mode is persistent and will be automatically restored on agent restart.
      queryParameters:
        enable:
          description: |
            This flag is required.
            Acceptable values are either true (to enter maintenance mode) or false (to resume normal operation).
          type: boolean
          required: true
        reason:
          description: |
            If provided, its value should be a text string explaining the reason for placing the node into maintenance mode.
            This is simply to aid human operators. If no reason is provided, a default value will be used instead.
          type: string
      responses:
        200:
          description: |
            Succesfully updated maintenance state.
  /join:
    /{address}:
      uriParameters:
        address:
          type: string
          required: true
      get:
        description: |
          Used to instruct the agent to attempt to connect to a given address.
        queryParameters:
          wan:
            description: |
              For agents running in server mode, providing a "?wan=1" query parameter causes the agent to attempt to join using the WAN pool.
            enum: [1]
        responses:
          200:
            description: |
              Succesfully joined to given address.
          500:
            description: |
              Network lookup or connection errors.
              Also if agent running in client mode try to join in WAN mode.
            body:
              text/plain: !!null
  /force-leave:
    /{node}:
      uriParameters:
        node:
          type: string
          required: true
      get:
        description: |
          Used to instruct the agent to force a node into the left state.
          If a node fails unexpectedly, then it will be in a failed state.
          Once in the failed state, Consul will attempt to reconnect, and the services and checks belonging to that node will not be cleaned up.
          Forcing a node into the left state allows its old entries to be removed.
        responses:
          200:
            description: |
              Always returns 200
  /service:
    /register:
      put:
        description: |
           Used to add a new service, with an optional health check, to the local agent.
           The agent is responsible for managing the status of the service and keeping the Catalog in sync.
        body:
          application/json: !!null
        responses:
          200:
            description: |
              Succesfully registered service.
    /deregister:
      /{serviceid}:
        uriParameters:
          serviceid:
            type: string
            required: true
        get:
          description: |
            Used to remove a service from the local agent.
            The agent will take care of deregistering the service with the Catalog.
            If there is an associated check, that is also deregistered.
          responses:
            200:
              description: |
                Succesfully deregistered service.
    /maintenance:
      /{serviceid}:
        uriParameters:
          serviceid:
            type: string
            required: true
        put:
          description: |
            Allows placing a given service into "maintenance mode".
            During maintenance mode, the service will be marked as unavailable and will not be present in DNS or API queries.
            This API call is idempotent. Maintenance mode is persistent and will be automatically restored on agent restart.
          queryParameters:
            enable:
              description: |
                This flag is required.
                Acceptable values are either true (to enter maintenance mode) or false (to resume normal operation).
              type: boolean
              required: true
            reason:
              description: |
                If provided, its value should be a text string explaining the reason for placing the node into maintenance mode.
                This is simply to aid human operators. If no reason is provided, a default value will be used instead.
              type: string
          responses:
            200:
              description: |
                Succesfully updated maintenance state.
  /check:
    /register:
      put:
        description: |
          Used to add a new check to the local agent.
        body:
          application/json: !!null
        responses:
          200:
            description: |
              Succesfully registered check.
    /deregister:
      /{checkid}:
        uriParameters:
          checkid:
            type: string
            required: true
        get:
          description: |
            Used to remove a check from the local agent.
            The agent will take care of deregistering the check from the Catalog.
          responses:
            200:
              description: |
                Succesfully deregistered check.
    /pass:
      /{checkid}:
        uriParameters:
          checkid:
            type: string
            required: true
        get:
          description: |
            This endpoint is used with a check that is of the TTL type.
            The status of the check is set to passing and the TTL clock is reset.
          queryParameters:
            note:
              description: |
                Optional query parameter can be used to associate a human-readable message with the status of the check
              type: string
          responses:
            200:
              description: |
                Succesfully updated TTL check.
    /warn:
      /{checkid}:
        uriParameters:
          checkid:
            type: string
            required: true
        get:
          description: |
            This endpoint is used with a check that is of the TTL type.
            The status of the check is set to warning and the TTL clock is reset.
          queryParameters:
            note:
              description: |
                Optional query parameter can be used to associate a human-readable message with the status of the check
              type: string
          responses:
            200:
              description: |
                Succesfully updated TTL check.
    /fail:
      /{checkid}:
        uriParameters:
          checkid:
            type: string
            required: true
        get:
          description: |
            This endpoint is used with a check that is of the TTL type.
            The status of the check is set to critical and the TTL clock is reset.
          queryParameters:
            note:
              description: |
                Optional query parameter can be used to associate a human-readable message with the status of the check
              type: string
          responses:
            200:
              description: |
                Succesfully updated TTL check.
/catalog:
  /register:
    put:
      description: |
         Low-level mechanism for registering or updating entries in the catalog.
         Note: it is usually preferrable instead to use the agent endpoints for registration as they are simpler and perform anti-entropy.
      body:
        application/json: !!null
      responses:
        200:
          description: |
            Succesfully registration.
  /deregister:
    put:
      description: |
         Low-level mechanism for directly removing entries from the Catalog.
         Note: it is usually preferrable instead to use the agent endpoints for deregistration as they are simpler and perform anti-entropy.
      body:
        application/json:
      responses:
        200:
          description: |
            Succesfully deregistration.
  /datacenters:
    get:
      description: |
        Used to return all the datacenters that are known by the Consul server.
        This endpoint does not require a cluster leader and will succeed even during an availability outage.
        Therefore, it can be used as a simple check to see if any Consul servers are routable.
      responses:
        200:
          description: |
            Succesfully retrieved list of datacenters.
          body:
            application/json: !!null
  /nodes:
    get:
      description: |
        Returns the nodes registered in a given DC. By default, the datacenter of the agent is queried.
      queryParameters:
        dc:
          description: |
            By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
          type: string
      responses:
        200:
          description: |
            Succesfully retrieved list of nodes.
          body:
            application/json: !!null
        500:
          description: |
            No path to datacenter.
          body:
            text/plain: !!null
  /services:
    get:
      description: |
        Returns the services registered in a given DC. By default, the datacenter of the agent is queried.
      queryParameters:
        dc:
          description: |
            By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
          type: string
      responses:
        200:
          description: |
            Succesfully retrieved map of services.
            The keys are the service names, and the array values provide all known tags for a given service.
          body:
            application/json: !!null
        500:
          description: |
            No path to datacenter.
          body:
            text/plain: !!null
  /service:
    /{service}:
      uriParameters:
        service:
          type: string
          minLength: 1
          required: true
      get:
        description: |
          Returns the nodes providing a service in a given DC.
        queryParameters:
          dc:
            description: |
              By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            type: string
          tag:
            description: |
              By default, all nodes matching the service are returned.
              The list can be filtered by tag using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully retrieved list of services.
            body:
              application/json: !!null
          400:
            description: |
              Missing service name.
            body:
              text/plain: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
  /node:
    /{node}:
      uriParameters:
        node:
          type: string
          minLength: 1
          required: true
      get:
        description: |
          Returns the node's registered services.
        queryParameters:
          dc:
            description: |
              By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully retrieved node information with registered services.
            body:
              application/json: !!null
          400:
            description: |
              Missing node name.
            body:
              text/plain: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
/session:
  /create:
    put:
      description: |
        Used to initialize a new session.
        Sessions must be associated with a node and may be associated with any number of checks.
      queryParameters:
        dc:
          description: |
            By default, the agent's local datacenter is used; another datacenter can be specified using this query parameter.
            However, it is not recommended to use cross-datacenter sessions.
          type: string
      body:
        application/json: !!null
      responses:
        200:
          description: |
            Returns the ID of the created session
          body:
            application/json: !!null
        500:
          description: |
            No path to datacenter.
          body:
            text/plain: !!null
  /destroy:
    /{session}:
      uriParameters:
        session:
          type: string
          minLength: 1
          # pattern: (use regexp for f971cad9-587d-47a8-8b5e-f3a5c00e985a format)
          required: true
      put:
        description: |
          Destroys the given session.
        queryParameters:
          dc:
            description: |
              By default, the agent's local datacenter is used; another datacenter can be specified using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully destroyed session.
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
  /info:
    /{session}:
      uriParameters:
        session:
          type: string
          minLength: 1
          # pattern: (use regexp for f971cad9-587d-47a8-8b5e-f3a5c00e985a format)
          required: true
      get:
        description: |
          Returns the requested session information within a given datacenter.
        queryParameters:
          dc:
            description: |
              By default, the agent's local datacenter is used; another datacenter can be specified using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully retrieved session info.
            body:
              application/json: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
  /node:
    /{node}:
      uriParameters:
        node:
          type: string
          minLength: 1
          required: true
      get:
        description: |
          Returns the active sessions for a given node and datacenter.
        queryParameters:
          dc:
            description: |
              By default, the agent's local datacenter is used; another datacenter can be specified using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully retrieved list of active sessions.
            body:
              application/json: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
  /list:
    get:
      description: |
        Returns the active sessions for a given datacenter.
      queryParameters:
        dc:
          description: |
            By default, the agent's local datacenter is used; another datacenter can be specified using this query parameter.
          type: string
      responses:
        200:
          description: |
            Succesfully retrieved list of active sessions.
          body:
            application/json: !!null
        500:
          description: |
            No path to datacenter.
          body:
            text/plain: !!null
  /renew:
    /{session}:
      put:
        description: |
          Used with sessions that have a TTL, and it extends the expiration by the TTL.
        queryParameters:
          dc:
            description: |
              By default, the agent's local datacenter is used; another datacenter can be specified using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully updated current session
            body:
              application/json: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
/health:
  /node:
    /{node}:
      uriParameters:
        node:
          type: string
          minLength: 1
          required: true
      get:
        description: |
          Returns the checks specific to the node provided on the path.
        queryParameters:
          dc:
            description: |
              By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully retrieved list of checks.
            body:
              application/json: !!null
          400:
            description: |
              Missing node name.
            body:
              text/plain: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
  /checks:
    /{service}:
      uriParameters:
        service:
          type: string
          minLength: 1
          required: true
      get:
        description: |
          Returns the checks associated with the service provided on the path.
        queryParameters:
          dc:
            description: |
              By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully retrieved list of checks.
            body:
              application/json: !!null
          400:
            description: |
              Missing service name.
            body:
              text/plain: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
  /service:
    /{service}:
      uriParameters:
        service:
          type: string
          required: true
      get:
        description: |
          Returns the nodes providing the service indicated on the path.
        queryParameters:
          dc:
            description: |
              By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            type: string
          tag:
            description: |
              By default, all nodes matching the service are returned.
              The list can be filtered by tag using this query parameter.
            type: string
          passing:
            description: |
              Providing the this query parameter will filter results to only nodes with all checks in the passing state.
              This can be used to avoid extra filtering logic on the client side. Only 'true' value allowed.
            enum: [true]
        responses:
          200:
            description: |
              Succesfully retrieved list of nodes with services on them associated checks.
            body:
              application/json: !!null
          400:
            description: |
              Missing service name.
            body:
              text/plain: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
  /state:
    /{state}:
      uriParameters:
        state:
          description: |
            The supported states are any, unknown, passing, warning, or critical.
            The any state is a wildcard that can be used to return all checks.
          enum: [any, unknown, passing, warning, critical]
          required: true
      get:
        description: |
          Returns the checks in the state provided on the path.
        queryParameters:
          dc:
            description: |
              By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            type: string
        responses:
          200:
            description: |
              Succesfully retrieved list of checks.
            body:
              application/json: !!null
          400:
            description: |
              Missing check state.
            body:
              text/plain: !!null
          500:
            description: |
              No path to datacenter.
            body:
              text/plain: !!null
/event:
  /fire:
    /{name}:
      uriParameters:
        name:
          minLength: 1
          type: string
          required: true
      put:
        description: |
          Fires a new user event.
        queryParameters:
          dc:
            description: |
              By default, the datacenter of the agent is queried; however, the dc can be provided using this query parameter.
            type: string
          node:
            description: |
              A regular expression to filter by node name.
            type: string
          service:
            description: |
              A regular expression to filter by service name.
            type: string
          tag:
            description: |
              A regular expression to filter by service tag.
            type: string
        body:
          application/x-www-form-urlencoded: !!null
        responses:
          200:
            description: |
              Succesfully created user event..
            body:
              application/json: !!null
  /list:
    get:
      description: |
        Returns the most recent events known by the agent
      queryParameters:
        name:
          description: |
            Filtering on events by name.
          type: string
        node:
          description: |
            A regular expression to filter by node name.
          type: string
        service:
          description: |
            A regular expression to filter by service name.
          type: string
        tag:
          description: |
            A regular expression to filter by service tag.
          type: string
      responses:
        200:
          description: |
            Succesfully retrieved resource
          body:
            application/json: !!null
/status:
  /leader:
    get:
      description: |
        Returns the current Raft leader.
      responses:
        200:
          body:
            application/json: !!null
  /peers:
    get:
      description: |
        Returns the current Raft peer set.
      responses:
        200:
          body:
            application/json: !!null
